{"version":3,"sources":["usePullRefreshScrollView.ts"],"names":["usePullRefreshScrollView","refreshing","callback","power","bounceOnPull","loaderHeight","scrollAnimatedValue","viewProps","ref","scrollY","scrollHeight","startY","dragging","onScrollProxy","onScroll","panGesture","Gesture","Pan","enabled","simultaneousWithExternalGesture","onUpdate","e","scroll","value","posY","translationY","newPosY","onEnd","gestures","Simultaneous","scrollHandler","event","contentOffset","y"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react';\nimport Animated, {\n  runOnJS,\n  useAnimatedRef,\n  useSharedValue,\n  useAnimatedScrollHandler,\n  withTiming,\n} from 'react-native-reanimated';\nimport { Gesture } from 'react-native-gesture-handler';\n\ninterface BasicScrollProps {\n  onScroll?: (args: any) => void;\n}\n\ninterface Props extends BasicScrollProps {\n  refreshing: boolean;\n  callback(): void;\n  power: number;\n  bounceOnPull: boolean;\n  loaderHeight: number;\n  scrollAnimatedValue?: Animated.SharedValue<number>;\n}\n\nfunction usePullRefreshScrollView({\n  refreshing,\n  callback,\n  power,\n  bounceOnPull,\n  loaderHeight,\n  scrollAnimatedValue,\n  ...viewProps\n}: Props) {\n  const ref = useAnimatedRef<any>();\n  const scrollY = useSharedValue(0);\n  const scrollHeight = useSharedValue(0);\n  const startY = useSharedValue(0);\n  const dragging = useSharedValue(false);\n\n  const onScrollProxy = useMemo(() => viewProps.onScroll, [viewProps.onScroll]);\n\n  const panGesture = Gesture.Pan()\n    .enabled(!refreshing)\n    .simultaneousWithExternalGesture(ref)\n    .onUpdate((e) => {\n      const scroll = scrollY.value;\n      let posY = e.translationY - startY.value;\n\n      // is on top and is intention to pull\n      if (scroll <= 0 && posY > 0) {\n        if (!dragging.value) {\n          startY.value = e.translationY;\n        }\n\n        dragging.value = true;\n      }\n\n      // is not on top and is intention scroll\n      if (scroll >= 0 && posY < 0) {\n        if (dragging.value) {\n          startY.value = e.translationY;\n        }\n\n        dragging.value = false;\n      }\n\n      posY = e.translationY - startY.value;\n\n      if (dragging.value) {\n        let newPosY = posY * power;\n\n        // when bounceOnPull is disabled we limit the loaderHeight based on the prop\n        if (!bounceOnPull && newPosY >= loaderHeight) {\n          scrollHeight.value = loaderHeight;\n\n          return;\n        }\n\n        // avoid going negative values since we want to go positive only\n        scrollHeight.value = newPosY < 0 ? 0 : newPosY;\n      } else {\n        scrollHeight.value = withTiming(0);\n      }\n    })\n    .onEnd(() => {\n      if (scrollHeight.value >= loaderHeight * 0.75) {\n        runOnJS(callback)();\n      } else {\n        scrollHeight.value = withTiming(0);\n      }\n\n      startY.value = 0;\n      dragging.value = false;\n    });\n\n  const gestures = Gesture.Simultaneous(panGesture);\n\n  const scrollHandler = useAnimatedScrollHandler({\n    onScroll: (event) => {\n      'worklet';\n      if (scrollAnimatedValue) {\n        scrollAnimatedValue.value = event.contentOffset.y;\n      }\n\n      onScrollProxy && onScrollProxy(event);\n      scrollY.value = event.contentOffset.y;\n    },\n  });\n\n  // effect for controlled loading state\n  useEffect(() => {\n    if (refreshing) {\n      scrollHeight.value = withTiming(loaderHeight);\n\n      return;\n    }\n\n    scrollHeight.value = withTiming(0);\n  }, [refreshing, loaderHeight, scrollHeight]);\n\n  return { ref, gestures, scrollHandler, scrollHeight, dragging };\n}\n\nexport default usePullRefreshScrollView;\n"]}