{"version":3,"sources":["index.tsx"],"names":["PullRefreshScrollViewComponent","props","view","viewRef","loadingChildren","refreshing","onPullRefresh","power","loaderHeight","bounceOnPull","wrapperStyle","containerStyle","ScrollableView","ComponentWithGesture","disallowInterruption","shouldCancelWhenOutside","Animated","createAnimatedComponent","ref","animatedRef","gestures","dragging","scrollHandler","scrollHeight","callback","setRef","viewComponentRef","current","style","position","transform","translateY","value","contentStyle","top","width","height","justifyContent","alignItems","animatedProps","scrollEnabled","animatedValue","PullRefreshScrollView"],"mappings":"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","sourcesContent":["import React, {\n  FunctionComponent,\n  MutableRefObject,\n  useCallback,\n  useMemo,\n} from 'react';\nimport type { StyleProp, ViewStyle } from 'react-native';\n\nimport {\n  createNativeWrapper,\n  GestureDetector,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  useAnimatedProps,\n  useAnimatedStyle,\n} from 'react-native-reanimated';\n\nimport usePullRefreshScrollView from './usePullRefreshScrollView';\n\ntype ViewComponentProps<T> = StyleProp<T> & object;\n\ntype ViewRef<T> = { viewRef?: MutableRefObject<T | undefined> };\n\ntype ComponentProps<T> = ViewComponentProps<T> &\n  ViewRef<T> & {\n    view: React.ComponentType<T>;\n    refreshing: boolean;\n    power?: number;\n    bounceOnPull?: boolean;\n    onPullRefresh(): void;\n    loadingChildren({\n      animatedValue,\n    }: {\n      animatedValue: Animated.SharedValue<number>;\n    }): React.ReactElement;\n    loaderHeight?: number;\n    wrapperStyle?: StyleProp<ViewStyle>;\n    containerStyle?: StyleProp<ViewStyle>;\n    scrollAnimatedValue?: Animated.SharedValue<number>;\n  };\n\ntype ComponentWithChildrenProps<T> = ComponentProps<T> & {\n  children: React.ReactElement | React.ReactElement[];\n};\n\nfunction PullRefreshScrollViewComponent<T extends object>(\n  props: ComponentProps<T> | ComponentWithChildrenProps<T>\n) {\n  const {\n    view,\n    viewRef,\n    loadingChildren,\n    refreshing,\n    onPullRefresh,\n    power = 0.5,\n    loaderHeight = 50,\n    bounceOnPull = true,\n    wrapperStyle,\n    containerStyle,\n  } = props;\n\n  const ScrollableView = useMemo(() => {\n    // As reanimated does not provide an export type to the createAnimatedComponent function,\n    // we set to any to avoid any break type in between the versions\n    const ComponentWithGesture = createNativeWrapper<T>(view, {\n      disallowInterruption: true,\n      shouldCancelWhenOutside: false,\n    }) as FunctionComponent<any>;\n\n    return Animated.createAnimatedComponent(ComponentWithGesture);\n  }, [view]);\n\n  const {\n    ref: animatedRef,\n    gestures,\n    dragging,\n    scrollHandler,\n    scrollHeight,\n  } = usePullRefreshScrollView({\n    ...props,\n    refreshing,\n    callback: onPullRefresh,\n    power,\n    bounceOnPull,\n    loaderHeight,\n  });\n\n  const setRef = useCallback(\n    (viewComponentRef: any) => {\n      (animatedRef.current as MutableRefObject<any>) = viewComponentRef;\n\n      if (typeof viewRef === 'function') {\n        (viewRef as Function)?.(viewComponentRef);\n      }\n\n      if (typeof viewRef === 'object') {\n        viewRef.current = viewComponentRef;\n      }\n    },\n    [animatedRef, viewRef]\n  );\n\n  const style = useAnimatedStyle(() => {\n    return {\n      position: 'relative',\n      transform: [\n        {\n          translateY: scrollHeight.value,\n        },\n      ],\n    };\n  });\n\n  const contentStyle = useAnimatedStyle(() => {\n    return {\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n      height: loaderHeight,\n      justifyContent: 'center',\n      alignItems: 'center',\n    };\n  });\n\n  // This props it is required to disable scrolling gesture to avoid mix gesture with pan\n  const animatedProps = useAnimatedProps(() => {\n    return {\n      scrollEnabled: !dragging.value,\n    };\n  });\n\n  return (\n    <GestureDetector gesture={gestures}>\n      <Animated.View style={wrapperStyle}>\n        <Animated.View style={contentStyle}>\n          {loadingChildren({ animatedValue: scrollHeight })}\n        </Animated.View>\n        <Animated.View style={[style, containerStyle]}>\n          <ScrollableView\n            {...props}\n            ref={setRef}\n            simultaneousHandlers={scrollHandler}\n            animatedProps={animatedProps}\n          />\n        </Animated.View>\n      </Animated.View>\n    </GestureDetector>\n  );\n}\n\nconst PullRefreshScrollView = PullRefreshScrollViewComponent;\n\nexport default PullRefreshScrollView;\n"]}